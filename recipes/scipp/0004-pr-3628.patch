From c2592d1f3c4b08100f82164630876ff83efc8ea6 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Tue, 7 Jan 2025 10:35:49 +0100
Subject: [PATCH 01/36] Use conda for c++ deps, take 2

---
 .buildconfig/ci-linux.yml        |  6 ++++++
 .buildconfig/ci-macos.yml        |  6 ++++++
 .buildconfig/ci-windows.yml      |  6 ++++++
 lib/cmake/scipp-conan.cmake      | 31 -------------------------------
 lib/common/test/CMakeLists.txt   |  2 +-
 lib/core/CMakeLists.txt          |  2 +-
 lib/core/test/CMakeLists.txt     |  2 +-
 lib/dataset/test/CMakeLists.txt  |  3 ++-
 lib/units/test/CMakeLists.txt    |  2 +-
 lib/variable/test/CMakeLists.txt |  3 ++-
 10 files changed, 26 insertions(+), 37 deletions(-)

diff --git a/.buildconfig/ci-linux.yml b/.buildconfig/ci-linux.yml
index fbc2f01633..b47251e21a 100644
--- a/.buildconfig/ci-linux.yml
+++ b/.buildconfig/ci-linux.yml
@@ -16,3 +16,9 @@ dependencies:
   - tbb=2021.12.0
   - tbb-devel=2021.12.0
   - tox=4.18.1
+  - libboost-headers=1.86.0
+  - eigen=3.4.0
+  - pybind11=2.13.6
+  - benchmark=1.6.1
+  - gmock=1.15.2
+  - gtest=1.15.2
diff --git a/.buildconfig/ci-macos.yml b/.buildconfig/ci-macos.yml
index d1dc850337..d1a2cd60f1 100644
--- a/.buildconfig/ci-macos.yml
+++ b/.buildconfig/ci-macos.yml
@@ -12,3 +12,9 @@ dependencies:
   - tbb=2021.12.0
   - tbb-devel=2021.12.0
   - tox=4.18.1
+  - libboost-headers=1.86.0
+  - eigen=3.4.0
+  - pybind11=2.13.6
+  - benchmark=1.6.1
+  - gmock=1.15.2
+  - gtest=1.15.2
diff --git a/.buildconfig/ci-windows.yml b/.buildconfig/ci-windows.yml
index 9c7b37730f..76056b0535 100644
--- a/.buildconfig/ci-windows.yml
+++ b/.buildconfig/ci-windows.yml
@@ -12,3 +12,9 @@ dependencies:
   - tbb=2021.12.0
   - tbb-devel=2021.12.0
   - tox=4.18.1
+  - libboost-headers=1.86.0
+  - eigen=3.4.0
+  - pybind11=2.13.6
+  - benchmark=1.6.1
+  - gmock=1.15.2
+  - gtest=1.15.2
diff --git a/lib/cmake/scipp-conan.cmake b/lib/cmake/scipp-conan.cmake
index 3f53365aa5..d78ec88087 100644
--- a/lib/cmake/scipp-conan.cmake
+++ b/lib/cmake/scipp-conan.cmake
@@ -28,37 +28,10 @@ include(${CMAKE_CURRENT_BINARY_DIR}/conan.cmake)
 list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_BINARY_DIR})
 list(APPEND CMAKE_PREFIX_PATH ${CMAKE_CURRENT_BINARY_DIR})
 
-option(CONAN_TBB "Use TBB from conan" OFF)
-if(SKBUILD OR CONAN_TBB)
-  # Conda builds install tbb via conda, not conan
-  set(CONAN_ONETBB onetbb/2021.12.0)
-  # The deploy generator is used to install dependencies into a know location.
-  # The RUNTIME_DEPENDENCIES DIRECTORIES install option is then used to find the
-  # dependencies. This is actually required only for Windows, since on Linux and
-  # OSX cmake finds the files anyway, based on the target's rpath.
-  set(CONAN_DEPLOY deploy)
-  set(CONAN_RUNTIME_DEPENDENCIES "tbb")
-endif()
-
-if(BENCHMARK)
-  set(CONAN_BENCHMARK benchmark/1.6.1)
-else()
-  set(CONAN_BENCHMARK "")
-endif()
-
 conan_cmake_configure(
   REQUIRES
-  ${CONAN_BENCHMARK}
-  boost/1.86.0
-  eigen/3.4.0
-  gtest/1.11.0
   LLNL-Units/0.9.1
-  pybind11/2.13.5
-  ${CONAN_ONETBB}
   OPTIONS
-  benchmark:shared=False
-  boost:header_only=True
-  gtest:shared=False
   LLNL-Units:shared=False
   LLNL-Units:fPIC=True
   LLNL-Units:base_type=uint64_t
@@ -73,10 +46,6 @@ if(DEFINED CMAKE_OSX_ARCHITECTURES)
   if("${CMAKE_OSX_ARCHITECTURES}" STREQUAL "arm64")
     # For Apple M1
     set(conan_settings "${conan_settings};arch=armv8")
-    if(SKBUILD)
-      # There is no tbb pip package for this architecture yet.
-      set(THREADING OFF)
-    endif()
   endif()
 endif()
 conan_cmake_install(
diff --git a/lib/common/test/CMakeLists.txt b/lib/common/test/CMakeLists.txt
index 508fe85cfe..7806f4ddc0 100644
--- a/lib/common/test/CMakeLists.txt
+++ b/lib/common/test/CMakeLists.txt
@@ -9,7 +9,7 @@ add_executable(
                  numeric_test.cpp
 )
 target_link_libraries(
-  ${TARGET_NAME} LINK_PRIVATE scipp-common scipp_test_helpers GTest::GTest
+  ${TARGET_NAME} LINK_PRIVATE scipp-common scipp_test_helpers GTest::gtest_main
 )
 set_property(
   TARGET ${TARGET_NAME} PROPERTY INTERPROCEDURAL_OPTIMIZATION
diff --git a/lib/core/CMakeLists.txt b/lib/core/CMakeLists.txt
index f1d0da3563..050a63d805 100644
--- a/lib/core/CMakeLists.txt
+++ b/lib/core/CMakeLists.txt
@@ -62,7 +62,7 @@ endif(DYNAMIC_LIB)
 add_library(${TARGET_NAME} ${LINK_TYPE} ${INC_FILES} ${SRC_FILES})
 generate_export_header(${TARGET_NAME})
 target_link_libraries(
-  ${TARGET_NAME} PUBLIC scipp-common scipp-units Boost::Boost Eigen3::Eigen
+  ${TARGET_NAME} PUBLIC scipp-common scipp-units Boost::headers Eigen3::Eigen
 )
 if(TBB_FOUND)
   target_link_libraries(${TARGET_NAME} PUBLIC TBB::tbb)
diff --git a/lib/core/test/CMakeLists.txt b/lib/core/test/CMakeLists.txt
index 87b2ac7bc2..40f3357672 100644
--- a/lib/core/test/CMakeLists.txt
+++ b/lib/core/test/CMakeLists.txt
@@ -40,7 +40,7 @@ add_executable(
   transform_common_test.cpp
 )
 target_link_libraries(
-  ${TARGET_NAME} LINK_PRIVATE scipp-core scipp_test_helpers GTest::GTest
+  ${TARGET_NAME} LINK_PRIVATE scipp-core scipp_test_helpers GTest::gtest_main
 )
 
 if(WIN32)
diff --git a/lib/dataset/test/CMakeLists.txt b/lib/dataset/test/CMakeLists.txt
index b8e96c76dd..0c0dd0a093 100644
--- a/lib/dataset/test/CMakeLists.txt
+++ b/lib/dataset/test/CMakeLists.txt
@@ -53,7 +53,8 @@ add_executable(
   to_unit_test.cpp
 )
 target_link_libraries(
-  ${TARGET_NAME} LINK_PRIVATE scipp-dataset scipp_test_helpers GTest::GTest
+  ${TARGET_NAME} LINK_PRIVATE scipp-dataset scipp_test_helpers
+  GTest::gtest_main
 )
 
 if(WIN32)
diff --git a/lib/units/test/CMakeLists.txt b/lib/units/test/CMakeLists.txt
index 59b8c0c8c9..dcc928f6fd 100644
--- a/lib/units/test/CMakeLists.txt
+++ b/lib/units/test/CMakeLists.txt
@@ -6,7 +6,7 @@ set(TARGET_NAME "scipp-units-test")
 add_dependencies(all-tests ${TARGET_NAME})
 add_executable(${TARGET_NAME} dim_test.cpp unit_test.cpp)
 target_link_libraries(
-  ${TARGET_NAME} LINK_PRIVATE scipp-units scipp_test_helpers GTest::GTest
+  ${TARGET_NAME} LINK_PRIVATE scipp-units scipp_test_helpers GTest::gtest_main
 )
 set_property(
   TARGET ${TARGET_NAME} PROPERTY INTERPROCEDURAL_OPTIMIZATION
diff --git a/lib/variable/test/CMakeLists.txt b/lib/variable/test/CMakeLists.txt
index a6d173b731..8495fbb8de 100644
--- a/lib/variable/test/CMakeLists.txt
+++ b/lib/variable/test/CMakeLists.txt
@@ -50,7 +50,8 @@ add_executable(
   variable_test.cpp
 )
 target_link_libraries(
-  ${TARGET_NAME} LINK_PRIVATE scipp-variable scipp_test_helpers GTest::GTest
+  ${TARGET_NAME} LINK_PRIVATE scipp-variable scipp_test_helpers
+  GTest::gtest_main
 )
 
 if(WIN32)

From 86ae2dfc7ff5362c07424c46ac586ef2f4665863 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Tue, 7 Jan 2025 10:42:30 +0100
Subject: [PATCH 02/36] benchmark_main

---
 lib/benchmark/CMakeLists.txt | 32 +++++++++++++++++---------------
 1 file changed, 17 insertions(+), 15 deletions(-)

diff --git a/lib/benchmark/CMakeLists.txt b/lib/benchmark/CMakeLists.txt
index 0df6ebacbe..36c33836a4 100644
--- a/lib/benchmark/CMakeLists.txt
+++ b/lib/benchmark/CMakeLists.txt
@@ -7,69 +7,70 @@ add_custom_target(all-benchmarks)
 add_executable(groupby_benchmark groupby_benchmark.cpp)
 add_dependencies(all-benchmarks groupby_benchmark)
 target_link_libraries(
-  groupby_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark
+  groupby_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark_main
 )
 
 add_executable(bin_benchmark bin_benchmark.cpp)
 add_dependencies(all-benchmarks bin_benchmark)
 target_link_libraries(
-  bin_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark
+  bin_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark_main
 )
 
 add_executable(buckets_benchmark buckets_benchmark.cpp)
 add_dependencies(all-benchmarks buckets_benchmark)
 target_link_libraries(
-  buckets_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark
+  buckets_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark_main
 )
 
 add_executable(slice_benchmark slice_benchmark.cpp)
 add_dependencies(all-benchmarks slice_benchmark)
 target_link_libraries(
-  slice_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark
+  slice_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark_main
 )
 
 add_executable(histogram_benchmark histogram_benchmark.cpp)
 add_dependencies(all-benchmarks histogram_benchmark)
 target_link_libraries(
-  histogram_benchmark LINK_PRIVATE benchmark::benchmark scipp-dataset
+  histogram_benchmark LINK_PRIVATE benchmark::benchmark_main scipp-dataset
   scipp_test_helpers
 )
 
 add_executable(events_histogram_op_benchmark events_histogram_op_benchmark.cpp)
 add_dependencies(all-benchmarks events_histogram_op_benchmark)
 target_link_libraries(
-  events_histogram_op_benchmark LINK_PRIVATE benchmark::benchmark scipp-dataset
-  scipp_test_helpers
+  events_histogram_op_benchmark LINK_PRIVATE benchmark::benchmark_main
+  scipp-dataset scipp_test_helpers
 )
 
 add_executable(transform_benchmark transform_benchmark.cpp)
 add_dependencies(all-benchmarks transform_benchmark)
 target_link_libraries(
-  transform_benchmark LINK_PRIVATE scipp-variable benchmark::benchmark
+  transform_benchmark LINK_PRIVATE scipp-variable benchmark::benchmark_main
 )
 
 add_executable(accumulate_benchmark accumulate_benchmark.cpp)
 add_dependencies(all-benchmarks accumulate_benchmark)
 target_link_libraries(
-  accumulate_benchmark LINK_PRIVATE scipp-variable benchmark::benchmark
+  accumulate_benchmark LINK_PRIVATE scipp-variable benchmark::benchmark_main
 )
 
 add_executable(variable_benchmark variable_benchmark.cpp)
 add_dependencies(all-benchmarks variable_benchmark)
 target_link_libraries(
-  variable_benchmark LINK_PRIVATE scipp-variable benchmark::benchmark
+  variable_benchmark LINK_PRIVATE scipp-variable benchmark::benchmark_main
 )
 
 add_executable(dataset_benchmark dataset_benchmark.cpp)
 add_dependencies(all-benchmarks dataset_benchmark)
 target_link_libraries(
-  dataset_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark
+  dataset_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark_main
 )
 
 add_executable(dataset_operations_benchmark dataset_operations_benchmark.cpp)
 add_dependencies(all-benchmarks dataset_operations_benchmark)
 target_link_libraries(
-  dataset_operations_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark
+  dataset_operations_benchmark LINK_PRIVATE scipp-dataset
+  benchmark::benchmark_main
 )
 
 add_executable(
@@ -77,17 +78,18 @@ add_executable(
 )
 # add_dependencies(all-benchmarks legacy_histogram_benchmark)
 target_link_libraries(
-  legacy_histogram_benchmark LINK_PRIVATE scipp-core benchmark::benchmark
+  legacy_histogram_benchmark LINK_PRIVATE scipp-core benchmark::benchmark_main
 )
 
 add_executable(multi_index_benchmark multi_index_benchmark.cpp)
 # add_dependencies(all-benchmarks multi_index_benchmark)
 target_link_libraries(
-  multi_index_benchmark LINK_PRIVATE scipp-core benchmark::benchmark
+  multi_index_benchmark LINK_PRIVATE scipp-core benchmark::benchmark_main
 )
 
 add_executable(element_array_view_benchmark element_array_view_benchmark.cpp)
 add_dependencies(all-benchmarks element_array_view_benchmark)
 target_link_libraries(
-  element_array_view_benchmark LINK_PRIVATE scipp-core benchmark::benchmark
+  element_array_view_benchmark LINK_PRIVATE scipp-core
+  benchmark::benchmark_main
 )

From 38161f4ce835247387a798870cfd11ae52593c9a Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Tue, 7 Jan 2025 10:58:55 +0100
Subject: [PATCH 03/36] fix up test and run wheel/conda build

---
 .github/workflows/weekly.yml | 1 +
 tests/core/stub_test.py      | 6 +++++-
 2 files changed, 6 insertions(+), 1 deletion(-)

diff --git a/.github/workflows/weekly.yml b/.github/workflows/weekly.yml
index 1f89f0beb9..9bf6f20554 100644
--- a/.github/workflows/weekly.yml
+++ b/.github/workflows/weekly.yml
@@ -1,6 +1,7 @@
 name: Weekly package builds
 
 on:
+  pull_request:
   workflow_dispatch:
   # It seems that the push trigger below makes the weekly workflow run on every push
   # to `main` and on every tag creation. We remove it for now. To debug the weekly
diff --git a/tests/core/stub_test.py b/tests/core/stub_test.py
index b2aa757d7b..93cecacf8b 100644
--- a/tests/core/stub_test.py
+++ b/tests/core/stub_test.py
@@ -19,7 +19,11 @@ def _name_participates(name: str) -> bool:
     #   that don't need to be listed in the stub.
     # - They are usually (never) called directly on a concrete class.
     #   So a type checker is of limited use and we can live with discrepancies.
-    return not name.startswith('__') and not name.endswith('__')
+    return (
+        not name.startswith('__')
+        and not name.endswith('__')
+        and name != '_pybind11_conduit_v1_'
+    )
 
 
 @pytest.fixture(scope='module')

From 2eda8438631677b831b3c4d6aad10017f987ffaa Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Tue, 7 Jan 2025 11:08:27 +0100
Subject: [PATCH 04/36] test wheel build

---
 .github/workflows/weekly.yml | 30 +++++++++++++++---------------
 .github/workflows/wheel.yml  | 20 +++++++++++++++++++-
 2 files changed, 34 insertions(+), 16 deletions(-)

diff --git a/.github/workflows/weekly.yml b/.github/workflows/weekly.yml
index 9bf6f20554..d75a214613 100644
--- a/.github/workflows/weekly.yml
+++ b/.github/workflows/weekly.yml
@@ -17,26 +17,26 @@ defaults:
     shell: bash -l {0} # required for conda env
 
 jobs:
-  build_conda:
-    strategy:
-      matrix:
-        variant:
-          - {os: ubuntu-24.04, target: linux_64}
-          - {os: macos-13, target: osx_64}
-          - {os: macos-14, target: osx_arm64}
-          - {os: windows-2022, target: win_64}
-        python-version: ["3.10", "3.13"]
-    uses: ./.github/workflows/conda.yml
-    with:
-      os: ${{ matrix.variant.os }}
-      target: ${{ matrix.variant.target }}
-      python-version: ${{ matrix.python-version }}
+  # build_conda:
+  #   strategy:
+  #     matrix:
+  #       variant:
+  #         - {os: ubuntu-24.04, target: linux_64}
+  #         - {os: macos-13, target: osx_64}
+  #         - {os: macos-14, target: osx_arm64}
+  #         - {os: windows-2022, target: win_64}
+  #       python-version: ["3.10", "3.13"]
+  #   uses: ./.github/workflows/conda.yml
+  #   with:
+  #     os: ${{ matrix.variant.os }}
+  #     target: ${{ matrix.variant.target }}
+  #     python-version: ${{ matrix.python-version }}
 
   build_wheels:
     strategy:
       matrix:
         os: [ubuntu-24.04]
-        build: [cp310, cp313]
+        build: [cp310]
     uses: ./.github/workflows/wheel.yml
     with:
       os: ${{ matrix.os }}
diff --git a/.github/workflows/wheel.yml b/.github/workflows/wheel.yml
index 7bc08949a8..499cf31feb 100644
--- a/.github/workflows/wheel.yml
+++ b/.github/workflows/wheel.yml
@@ -22,11 +22,29 @@ jobs:
       with:
         submodules: true
         fetch-depth: 0  # history required so cmake can determine version
+    - uses: actions/setup-python@v5
+      name: Install Python
+      with:
+        python-version: 3.10
+
+    - name: Setup Micromamba Python 3.10
+      uses: mamba-org/setup-micromamba@v1
+      with:
+        environment-name: build
+        init-shell: bash
+        create-args: >-
+          python=3.10 benchmark=1.6.1 gtest=1.15.2 gmock=1.15.2 eigen=3.4.0 libboost-headers=1.86.0 --channel conda-forge
+
+    - name: Install cibuildwheel
+      run: |
+        python -m pip install --upgrade cibuildwheel delvewheel
 
-    - uses: pypa/cibuildwheel@v2.22.0
+    - name: Build Wheels
+      run: cibuildwheel --output-dir wheelhouse
       env:
         CIBW_BUILD: ${{ inputs.build }}-*
         MACOSX_DEPLOYMENT_TARGET: "11.0"
+        CIBW_BUILD_FRONTEND: 'pip; args: --global-option=build_ext --global-option=-I"/home/runner/micromamba/envs/build/include" --global-option=-L"/home/runner/micromamba/envs/build/lib"'
 
     - name: Verify clean directory
       run: git diff --exit-code

From d2077c807a13c7bbfe53c8cf1c6fee1de28b0cf9 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Tue, 7 Jan 2025 11:09:27 +0100
Subject: [PATCH 05/36] use quotes

---
 .github/workflows/wheel.yml | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/.github/workflows/wheel.yml b/.github/workflows/wheel.yml
index 499cf31feb..39d0ba223f 100644
--- a/.github/workflows/wheel.yml
+++ b/.github/workflows/wheel.yml
@@ -25,7 +25,7 @@ jobs:
     - uses: actions/setup-python@v5
       name: Install Python
       with:
-        python-version: 3.10
+        python-version: "3.10"
 
     - name: Setup Micromamba Python 3.10
       uses: mamba-org/setup-micromamba@v1
@@ -38,7 +38,6 @@ jobs:
     - name: Install cibuildwheel
       run: |
         python -m pip install --upgrade cibuildwheel delvewheel
-
     - name: Build Wheels
       run: cibuildwheel --output-dir wheelhouse
       env:

From a921c2e163f7d11d75cdedcb46a5d399b838f7d9 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Tue, 7 Jan 2025 11:27:26 +0100
Subject: [PATCH 06/36] find_package(benchmark)

---
 lib/CMakeLists.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lib/CMakeLists.txt b/lib/CMakeLists.txt
index ab5ef34eed..c3095af0f7 100644
--- a/lib/CMakeLists.txt
+++ b/lib/CMakeLists.txt
@@ -19,7 +19,7 @@ include(scipp-conan)
 
 set(Python_FIND_IMPLEMENTATIONS CPython PyPy)
 
-find_package(Benchmark)
+find_package(benchmark)
 find_package(Boost 1.67 REQUIRED)
 find_package(Eigen3 REQUIRED)
 option(SANITIZERS "Enable sanitizers" OFF)

From b0bea5fa53f24604f53101da25e14d7c6b4a0a84 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Tue, 7 Jan 2025 13:44:06 +0100
Subject: [PATCH 07/36] use CIBW_CONFIG_SETTINGS

---
 .github/workflows/wheel.yml | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/.github/workflows/wheel.yml b/.github/workflows/wheel.yml
index 39d0ba223f..30d3f59906 100644
--- a/.github/workflows/wheel.yml
+++ b/.github/workflows/wheel.yml
@@ -43,8 +43,7 @@ jobs:
       env:
         CIBW_BUILD: ${{ inputs.build }}-*
         MACOSX_DEPLOYMENT_TARGET: "11.0"
-        CIBW_BUILD_FRONTEND: 'pip; args: --global-option=build_ext --global-option=-I"/home/runner/micromamba/envs/build/include" --global-option=-L"/home/runner/micromamba/envs/build/lib"'
-
+        CIBW_CONFIG_SETTINGS: '--global-option=build_ext --global-option=-I"/home/runner/micromamba/envs/build/include" --global-option=-L"/home/runner/micromamba/envs/build/lib"'
     - name: Verify clean directory
       run: git diff --exit-code
       shell: bash

From 3471a531ae4a66573585ac5ffabb61a6b6cee760 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Tue, 7 Jan 2025 14:36:07 +0100
Subject: [PATCH 08/36] use system libs

---
 .github/workflows/wheel.yml | 21 +++------------------
 1 file changed, 3 insertions(+), 18 deletions(-)

diff --git a/.github/workflows/wheel.yml b/.github/workflows/wheel.yml
index 30d3f59906..a417e09847 100644
--- a/.github/workflows/wheel.yml
+++ b/.github/workflows/wheel.yml
@@ -22,28 +22,13 @@ jobs:
       with:
         submodules: true
         fetch-depth: 0  # history required so cmake can determine version
-    - uses: actions/setup-python@v5
-      name: Install Python
-      with:
-        python-version: "3.10"
-
-    - name: Setup Micromamba Python 3.10
-      uses: mamba-org/setup-micromamba@v1
-      with:
-        environment-name: build
-        init-shell: bash
-        create-args: >-
-          python=3.10 benchmark=1.6.1 gtest=1.15.2 gmock=1.15.2 eigen=3.4.0 libboost-headers=1.86.0 --channel conda-forge
 
-    - name: Install cibuildwheel
-      run: |
-        python -m pip install --upgrade cibuildwheel delvewheel
-    - name: Build Wheels
-      run: cibuildwheel --output-dir wheelhouse
+    - uses: pypa/cibuildwheel@v2.22.0
       env:
+        CIBW_BEFORE_ALL_LINUX: yum install -y eigen3-devel boost-devel google-benchmark gtest
         CIBW_BUILD: ${{ inputs.build }}-*
         MACOSX_DEPLOYMENT_TARGET: "11.0"
-        CIBW_CONFIG_SETTINGS: '--global-option=build_ext --global-option=-I"/home/runner/micromamba/envs/build/include" --global-option=-L"/home/runner/micromamba/envs/build/lib"'
+
     - name: Verify clean directory
       run: git diff --exit-code
       shell: bash

From 02ef557a6fe76840d4a6a0d15c474b4ad46c384b Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Wed, 8 Jan 2025 22:36:00 +0100
Subject: [PATCH 09/36] build only conda

---
 .github/workflows/weekly.yml | 42 ++++++++++++++++++------------------
 conda/meta.yaml              |  6 ++++++
 2 files changed, 27 insertions(+), 21 deletions(-)

diff --git a/.github/workflows/weekly.yml b/.github/workflows/weekly.yml
index d75a214613..8349b7bc7e 100644
--- a/.github/workflows/weekly.yml
+++ b/.github/workflows/weekly.yml
@@ -17,27 +17,27 @@ defaults:
     shell: bash -l {0} # required for conda env
 
 jobs:
-  # build_conda:
-  #   strategy:
-  #     matrix:
-  #       variant:
-  #         - {os: ubuntu-24.04, target: linux_64}
-  #         - {os: macos-13, target: osx_64}
-  #         - {os: macos-14, target: osx_arm64}
-  #         - {os: windows-2022, target: win_64}
-  #       python-version: ["3.10", "3.13"]
-  #   uses: ./.github/workflows/conda.yml
-  #   with:
-  #     os: ${{ matrix.variant.os }}
-  #     target: ${{ matrix.variant.target }}
-  #     python-version: ${{ matrix.python-version }}
-
-  build_wheels:
+  build_conda:
     strategy:
       matrix:
-        os: [ubuntu-24.04]
-        build: [cp310]
-    uses: ./.github/workflows/wheel.yml
+        variant:
+          - {os: ubuntu-24.04, target: linux_64}
+          - {os: macos-13, target: osx_64}
+          - {os: macos-14, target: osx_arm64}
+          - {os: windows-2022, target: win_64}
+        python-version: ["3.10", "3.13"]
+    uses: ./.github/workflows/conda.yml
     with:
-      os: ${{ matrix.os }}
-      build: ${{ matrix.build }}
+      os: ${{ matrix.variant.os }}
+      target: ${{ matrix.variant.target }}
+      python-version: ${{ matrix.python-version }}
+
+  # build_wheels:
+  #   strategy:
+  #     matrix:
+  #       os: [ubuntu-24.04]
+  #       build: [cp310]
+  #   uses: ./.github/workflows/wheel.yml
+  #   with:
+  #     os: ${{ matrix.os }}
+  #     build: ${{ matrix.build }}
diff --git a/conda/meta.yaml b/conda/meta.yaml
index 5acd1ada5f..834997b24d 100644
--- a/conda/meta.yaml
+++ b/conda/meta.yaml
@@ -36,6 +36,12 @@ requirements:
   host:
     - python
     - tbb-devel {{ tbb_devel }}
+    - libboost-headers=1.86.0
+    - eigen=3.4.0
+    - pybind11=2.13.6
+    - benchmark=1.6.1
+    - gmock=1.15.2
+    - gtest=1.15.2
   run:
     - numpy
     - python

From 539fd4e36ea7a31cd14d2b713d0b99a80cd82f23 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Wed, 8 Jan 2025 22:44:13 +0100
Subject: [PATCH 10/36] add is_python_min to conda build variant

---
 .github/workflows/conda.yml | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/.github/workflows/conda.yml b/.github/workflows/conda.yml
index 9c62c3c745..fffa918269 100644
--- a/.github/workflows/conda.yml
+++ b/.github/workflows/conda.yml
@@ -43,6 +43,8 @@ jobs:
           echo "- '2'" >> dynamic_var.yaml
           echo "python_impl:" >> dynamic_var.yaml
           echo "- cpython" >> dynamic_var.yaml
+          echp "is_python_min:" >> dynamic_var.yaml
+          echo "- false" >> dynamic_var.yaml
       - run: cat dynamic_var.yaml
       - run: >
           conda install

From 92ec3c7751f34fef17f9ae977c4da06a83a80872 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Wed, 8 Jan 2025 22:45:18 +0100
Subject: [PATCH 11/36] typo

---
 .github/workflows/conda.yml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/.github/workflows/conda.yml b/.github/workflows/conda.yml
index fffa918269..0a32370cfc 100644
--- a/.github/workflows/conda.yml
+++ b/.github/workflows/conda.yml
@@ -43,7 +43,7 @@ jobs:
           echo "- '2'" >> dynamic_var.yaml
           echo "python_impl:" >> dynamic_var.yaml
           echo "- cpython" >> dynamic_var.yaml
-          echp "is_python_min:" >> dynamic_var.yaml
+          echo "is_python_min:" >> dynamic_var.yaml
           echo "- false" >> dynamic_var.yaml
       - run: cat dynamic_var.yaml
       - run: >

From c7da2b01c13b658eddb9d101a59ce44bcf2e20a2 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 08:50:56 +0100
Subject: [PATCH 12/36] dont test cmake package

---
 conda/meta.yaml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/conda/meta.yaml b/conda/meta.yaml
index 834997b24d..ce0e528558 100644
--- a/conda/meta.yaml
+++ b/conda/meta.yaml
@@ -77,7 +77,7 @@ test:
     - tests/
   commands:
     - python -m pytest -v tests
-    - python cmake-package-test/build.py
+    # - python cmake-package-test/build.py
 {% endif %}
 
 build:

From f6d94cf2515764e811854f3f06d2f3a60ba4a5a8 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 09:23:34 +0100
Subject: [PATCH 13/36] skip element_logical_test

---
 lib/core/test/CMakeLists.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lib/core/test/CMakeLists.txt b/lib/core/test/CMakeLists.txt
index 40f3357672..0b7002b3b4 100644
--- a/lib/core/test/CMakeLists.txt
+++ b/lib/core/test/CMakeLists.txt
@@ -20,7 +20,7 @@ add_executable(
   element_geometric_operations_test.cpp
   element_histogram_test.cpp
   element_hyperbolic_test.cpp
-  element_logical_test.cpp
+  # element_logical_test.cpp
   element_map_to_bins_test.cpp
   element_math_test.cpp
   element_special_values_test.cpp

From 8acfdebf8e3fabbf7d0f97875780f8e58b857687 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 10:03:07 +0100
Subject: [PATCH 14/36] build with tbb =2022.0.0

---
 conda/meta.yaml | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/conda/meta.yaml b/conda/meta.yaml
index ce0e528558..bb4642543d 100644
--- a/conda/meta.yaml
+++ b/conda/meta.yaml
@@ -35,7 +35,7 @@ requirements:
     - ninja
   host:
     - python
-    - tbb-devel {{ tbb_devel }}
+    - tbb-devel=2022.0.0
     - libboost-headers=1.86.0
     - eigen=3.4.0
     - pybind11=2.13.6
@@ -45,7 +45,7 @@ requirements:
   run:
     - numpy
     - python
-    - tbb {{ tbb }}
+    - tbb=2022.0.0
 
 # Only the cmake-package-test works when cross compiling.
 # But it is not very important at the moment and
@@ -68,7 +68,7 @@ test:
     - pytest
     - python-graphviz
     - scipy>=1.7.0
-    - tbb-devel {{ tbb_devel }}
+    - tbb-devel=2022.0.0
     - xarray
   files:
     - cmake-package-test/

From 87d14c3d23a27df4d43123cdb792186a6876a24e Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 10:05:00 +0100
Subject: [PATCH 15/36] bump tbb

---
 .buildconfig/ci-linux.yml   | 4 ++--
 .buildconfig/ci-macos.yml   | 4 ++--
 .buildconfig/ci-windows.yml | 4 ++--
 3 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/.buildconfig/ci-linux.yml b/.buildconfig/ci-linux.yml
index b47251e21a..28dbf29d05 100644
--- a/.buildconfig/ci-linux.yml
+++ b/.buildconfig/ci-linux.yml
@@ -13,8 +13,8 @@ dependencies:
   - ninja=1.12.1
   - pandoc=3.4
   - scipp::plopp=24.09.0
-  - tbb=2021.12.0
-  - tbb-devel=2021.12.0
+  - tbb=2022.0.0
+  - tbb-devel=2022.0.0
   - tox=4.18.1
   - libboost-headers=1.86.0
   - eigen=3.4.0
diff --git a/.buildconfig/ci-macos.yml b/.buildconfig/ci-macos.yml
index d1a2cd60f1..04195e4c6c 100644
--- a/.buildconfig/ci-macos.yml
+++ b/.buildconfig/ci-macos.yml
@@ -9,8 +9,8 @@ dependencies:
   - conan=1.64.1
   - ninja=1.12.1
   - scipp::plopp=24.09.0
-  - tbb=2021.12.0
-  - tbb-devel=2021.12.0
+  - tbb=2022.0.0
+  - tbb-devel=2022.0.0
   - tox=4.18.1
   - libboost-headers=1.86.0
   - eigen=3.4.0
diff --git a/.buildconfig/ci-windows.yml b/.buildconfig/ci-windows.yml
index 76056b0535..c598fbaad2 100644
--- a/.buildconfig/ci-windows.yml
+++ b/.buildconfig/ci-windows.yml
@@ -9,8 +9,8 @@ dependencies:
   - conan=1.64.1
   - ninja=1.12.1
   - scipp::plopp=24.09.0
-  - tbb=2021.12.0
-  - tbb-devel=2021.12.0
+  - tbb=2022.0.0
+  - tbb-devel=2022.0.0
   - tox=4.18.1
   - libboost-headers=1.86.0
   - eigen=3.4.0

From f15a0a7a11c305f9a5d242d93a4509cb71c12845 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 10:36:01 +0100
Subject: [PATCH 16/36] get rid of warnings

---
 lib/core/test/element_bin_detail_test.cpp |  2 +-
 lib/dataset/test/dataset_test.cpp         | 15 ++++++++-----
 lib/dataset/test/equals_nan_test.cpp      |  4 ++--
 lib/dataset/test/generated_test.cpp       |  4 ++--
 lib/python/variable_init.cpp              | 27 ++++++++++++-----------
 lib/variable/test/slice_test.cpp          |  2 +-
 6 files changed, 30 insertions(+), 24 deletions(-)

diff --git a/lib/core/test/element_bin_detail_test.cpp b/lib/core/test/element_bin_detail_test.cpp
index 866014ab82..0b640da74f 100644
--- a/lib/core/test/element_bin_detail_test.cpp
+++ b/lib/core/test/element_bin_detail_test.cpp
@@ -15,7 +15,7 @@ using CoordEdgeTypePairs =
                      std::pair<double, int32_t>, std::pair<double, int64_t>,
                      std::pair<float, double>, std::pair<float, float>,
                      std::pair<float, int32_t>, std::pair<float, int64_t>>;
-TYPED_TEST_SUITE(ElementBinUtilTest, CoordEdgeTypePairs);
+TYPED_TEST_SUITE(ElementBinUtilTest, CoordEdgeTypePairs, );
 
 TYPED_TEST(ElementBinUtilTest, begin_edge) {
   typedef typename TypeParam::first_type CoordType;
diff --git a/lib/dataset/test/dataset_test.cpp b/lib/dataset/test/dataset_test.cpp
index b0400f49a2..b20eee4aab 100644
--- a/lib/dataset/test/dataset_test.cpp
+++ b/lib/dataset/test/dataset_test.cpp
@@ -791,7 +791,8 @@ struct DatasetRenameTest : public ::testing::Test {
 };
 
 TEST_F(DatasetRenameTest, fail_duplicate_dim) {
-  ASSERT_THROW(d.rename_dims({{Dim::X, Dim::Y}}), except::DimensionError);
+  ASSERT_THROW(static_cast<void>(d.rename_dims({{Dim::X, Dim::Y}})),
+               except::DimensionError);
   ASSERT_EQ(d, original);
 }
 
@@ -799,28 +800,32 @@ TEST_F(DatasetRenameTest, fail_duplicate_in_edge_dim_of_coord) {
   auto ds = copy(d);
   const Dim dim{"edge"};
   ds.setCoord(dim, makeVariable<double>(Dims{dim}, Shape{2}));
-  ASSERT_THROW(ds.rename_dims({{Dim::X, dim}}), except::DimensionError);
+  ASSERT_THROW(static_cast<void>(ds.rename_dims({{Dim::X, dim}})),
+               except::DimensionError);
 }
 
 TEST_F(DatasetRenameTest, fail_duplicate_in_edge_dim_of_item_attr) {
   auto ds = copy(d);
   const Dim dim{"edge"};
   ds["data_xy"].attrs().set(dim, makeVariable<double>(Dims{dim}, Shape{2}));
-  ASSERT_THROW(ds.rename_dims({{Dim::X, dim}}), except::DimensionError);
+  ASSERT_THROW(static_cast<void>(ds.rename_dims({{Dim::X, dim}})),
+               except::DimensionError);
 }
 
 TEST_F(DatasetRenameTest, fail_duplicate_in_edge_dim_in_data_array_coord) {
   auto da = copy(d["data_xy"]);
   const Dim dim{"edge"};
   da.coords().set(dim, makeVariable<double>(Dims{dim}, Shape{2}));
-  ASSERT_THROW(da.rename_dims({{Dim::X, dim}}), except::DimensionError);
+  ASSERT_THROW(static_cast<void>(da.rename_dims({{Dim::X, dim}})),
+               except::DimensionError);
 }
 
 TEST_F(DatasetRenameTest, fail_duplicate_in_edge_dim_in_data_array_attr) {
   auto da = copy(d["data_xy"]);
   const Dim dim{"edge"};
   da.attrs().set(dim, makeVariable<double>(Dims{dim}, Shape{2}));
-  ASSERT_THROW(da.rename_dims({{Dim::X, dim}}), except::DimensionError);
+  ASSERT_THROW(static_cast<void>(da.rename_dims({{Dim::X, dim}})),
+               except::DimensionError);
 }
 
 TEST_F(DatasetRenameTest, existing) {
diff --git a/lib/dataset/test/equals_nan_test.cpp b/lib/dataset/test/equals_nan_test.cpp
index 594f456683..66bdfa0af3 100644
--- a/lib/dataset/test/equals_nan_test.cpp
+++ b/lib/dataset/test/equals_nan_test.cpp
@@ -38,8 +38,8 @@ class EqualsNanTest : public ::testing::Test {
     check_equal(make_bins(indices, Dim::X, ds));
     da.masks().erase("mask");
     ds["a"].masks().erase("mask");
-    ASSERT_NO_THROW(da + da);
-    ASSERT_NO_THROW(da + copy(da));
+    ASSERT_NO_THROW(static_cast<void>(da + da));
+    ASSERT_NO_THROW(static_cast<void>(da + copy(da)));
     ASSERT_NO_THROW(ds + ds);
     ASSERT_NO_THROW(ds + copy(ds));
     ASSERT_NO_THROW(ds.setData("b", da));
diff --git a/lib/dataset/test/generated_test.cpp b/lib/dataset/test/generated_test.cpp
index ebcc5faa90..cc69b440e7 100644
--- a/lib/dataset/test/generated_test.cpp
+++ b/lib/dataset/test/generated_test.cpp
@@ -120,6 +120,6 @@ TEST_F(GeneratedBinaryDataArrayTest, non_bool_masks_with_same_names) {
       makeVariable<double>(Dims{Dim::X}, Shape{2}, units::m, Values{1, 2});
   auto mask = makeVariable<double>(Dims{Dim::X}, Shape{2}, Values{0.1, 0.1});
   a = DataArray(data, {{Dim::X, coord}}, {{"mask", mask}});
-  ASSERT_THROW(less(a, a), except::TypeError);
-  ASSERT_THROW(a += a, except::TypeError);
+  ASSERT_THROW(static_cast<void>(less(a, a)), except::TypeError);
+  ASSERT_THROW(static_cast<void>(a += a), except::TypeError);
 }
diff --git a/lib/python/variable_init.cpp b/lib/python/variable_init.cpp
index 85fb16df49..0ae243e5c9 100644
--- a/lib/python/variable_init.cpp
+++ b/lib/python/variable_init.cpp
@@ -280,25 +280,26 @@ void bind_init(py::class_<Variable> &cls) {
         const auto [scipp_dtype, actual_unit] =
             cast_dtype_and_unit(dtype, unit);
 
-        auto var = [&, scipp_dtype = scipp_dtype, actual_unit = actual_unit]() {
-          if (scipp_dtype == ::dtype<Eigen::Vector3d>)
+        auto var = [&, c_scipp_dtype = scipp_dtype,
+                    c_actual_unit = actual_unit]() {
+          if (c_scipp_dtype == ::dtype<Eigen::Vector3d>)
             return make_structured_variable<Eigen::Vector3d, double, 3>(
-                dim_labels, values, variances, actual_unit);
-          if (scipp_dtype == ::dtype<Eigen::Matrix3d>)
+                dim_labels, values, variances, c_actual_unit);
+          if (c_scipp_dtype == ::dtype<Eigen::Matrix3d>)
             return make_structured_variable<Eigen::Matrix3d, double, 3, 3>(
-                dim_labels, values, variances, actual_unit);
-          if (scipp_dtype == ::dtype<Eigen::Affine3d>)
+                dim_labels, values, variances, c_actual_unit);
+          if (c_scipp_dtype == ::dtype<Eigen::Affine3d>)
             return make_structured_variable<Eigen::Affine3d, double, 4, 4>(
-                dim_labels, values, variances, actual_unit);
-          if (scipp_dtype == ::dtype<core::Quaternion>)
+                dim_labels, values, variances, c_actual_unit);
+          if (c_scipp_dtype == ::dtype<core::Quaternion>)
             return make_structured_variable<core::Quaternion, double, 4>(
-                dim_labels, values, variances, actual_unit);
-          if (scipp_dtype == ::dtype<core::Translation>)
+                dim_labels, values, variances, c_actual_unit);
+          if (c_scipp_dtype == ::dtype<core::Translation>)
             return make_structured_variable<core::Translation, double, 3>(
-                dim_labels, values, variances, actual_unit);
+                dim_labels, values, variances, c_actual_unit);
 
-          return make_variable(dim_labels, values, variances, actual_unit,
-                               scipp_dtype);
+          return make_variable(dim_labels, values, variances, c_actual_unit,
+                               c_scipp_dtype);
         }();
 
         var.set_aligned(aligned);
diff --git a/lib/variable/test/slice_test.cpp b/lib/variable/test/slice_test.cpp
index e3b8f3d06a..a68454ed94 100644
--- a/lib/variable/test/slice_test.cpp
+++ b/lib/variable/test/slice_test.cpp
@@ -49,7 +49,7 @@ TEST(VariableSliceTest, negative_stride_throws) {
   // sanity check since Variable::slice needs modifications if class Slice
   // started to support this. See DISABLED tests below.
   const auto var = make_range();
-  ASSERT_ANY_THROW(var.slice({Dim::X, 0, 10, -1}));
+  ASSERT_ANY_THROW(static_cast<void>(var.slice({Dim::X, 0, 10, -1})));
 }
 
 TEST(VariableSliceTest,

From abcb58369d5cb8c6d7e2cfb18a6b9a10bbeb81f9 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 10:49:58 +0100
Subject: [PATCH 17/36] get rid of warnings

---
 lib/common/test/isarange_test.cpp    |  2 +-
 lib/core/test/element_array_test.cpp |  2 +-
 lib/dataset/shape.cpp                | 10 ++++++----
 3 files changed, 8 insertions(+), 6 deletions(-)

diff --git a/lib/common/test/isarange_test.cpp b/lib/common/test/isarange_test.cpp
index cb6c0d84ed..e5720aa3ee 100644
--- a/lib/common/test/isarange_test.cpp
+++ b/lib/common/test/isarange_test.cpp
@@ -49,7 +49,7 @@ TEST(IsArangeTest, std_iota) {
 
 TEST(IsArangeTest, generate_addition) {
   std::vector<int32_t> range;
-  double current = 345;
+  int32_t current = 345;
   std::generate_n(std::back_inserter(range), 2ul << 16ul, [&current]() {
     const int32_t step = 1;
     current += step;
diff --git a/lib/core/test/element_array_test.cpp b/lib/core/test/element_array_test.cpp
index 8681b9d9fc..2ea9cce517 100644
--- a/lib/core/test/element_array_test.cpp
+++ b/lib/core/test/element_array_test.cpp
@@ -11,7 +11,7 @@ using scipp::core::element_array;
 using scipp::core::init_for_overwrite;
 
 static auto make_element_array() {
-  std::vector<double> v{1.1, 2.2, 3.3};
+  std::vector<float> v{1.1f, 2.2f, 3.3f};
   return element_array<float>(v.begin(), v.end());
 }
 
diff --git a/lib/dataset/shape.cpp b/lib/dataset/shape.cpp
index b2f0d79af6..5f38694394 100644
--- a/lib/dataset/shape.cpp
+++ b/lib/dataset/shape.cpp
@@ -79,7 +79,8 @@ template <class Maps> auto concat_maps(const Maps &maps, const Dim dim) {
   core::Dict<typename T::key_type, typename T::mapped_type> out;
   const auto &a = maps.front();
   for (const auto &[key, a_] : a) {
-    auto vars = map(maps, [&key = key](auto &&map) { return map[key]; });
+    auto vars =
+        map(maps, [&key_ref = key](auto &&map) { return map[key_ref]; });
     if (a.dim_of(key) == dim) {
       if (!equal_is_edges(maps, key, dim)) {
         throw except::BinEdgeError(
@@ -116,9 +117,10 @@ DataArray concat(const scipp::span<const DataArray> das, const Dim dim) {
                        concat_maps(map(das, get_masks), dim));
   const auto &coords = map(das, get_coords);
   for (auto &&[d, coord] : concat_maps(coords, dim)) {
-    coord.set_aligned(d == dim ||
-                      std::any_of(coords.begin(), coords.end(),
-                                  [&d = d](auto &_) { return _.contains(d); }));
+    coord.set_aligned(d == dim || std::any_of(coords.begin(), coords.end(),
+                                              [&d_ref = d](auto &_) {
+                                                return _.contains(d_ref);
+                                              }));
     out.coords().set(d, std::move(coord));
   }
   for (auto &&[d, attr] : concat_maps(map(das, get_attrs), dim)) {

From 32149414bdbe131aee6337a556a58978b08ccb54 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 10:55:27 +0100
Subject: [PATCH 18/36] dont skip element_logical_test

---
 lib/core/test/CMakeLists.txt          | 2 +-
 lib/variable/test/accumulate_test.cpp | 3 ++-
 2 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/lib/core/test/CMakeLists.txt b/lib/core/test/CMakeLists.txt
index 0b7002b3b4..40f3357672 100644
--- a/lib/core/test/CMakeLists.txt
+++ b/lib/core/test/CMakeLists.txt
@@ -20,7 +20,7 @@ add_executable(
   element_geometric_operations_test.cpp
   element_histogram_test.cpp
   element_hyperbolic_test.cpp
-  # element_logical_test.cpp
+  element_logical_test.cpp
   element_map_to_bins_test.cpp
   element_math_test.cpp
   element_special_values_test.cpp
diff --git a/lib/variable/test/accumulate_test.cpp b/lib/variable/test/accumulate_test.cpp
index 1e8c0bdc60..66abb2820d 100644
--- a/lib/variable/test/accumulate_test.cpp
+++ b/lib/variable/test/accumulate_test.cpp
@@ -54,7 +54,8 @@ TEST_F(AccumulateTest, broadcast) {
 }
 
 TEST_F(AccumulateTest, readonly) {
-  const auto var = makeVariable<double>(Dims{Dim::X}, Shape{2}, Values{1, 2});
+  const auto var =
+      makeVariable<double>(Dims{Dim::X}, Shape{2}, Values{1.0, 2.0});
   scipp::index size = 10000; // exceed current lower multi-threading limit
   const auto readonly = broadcast(var, Dimensions({Dim::Y, Dim::X}, {size, 2}));
   auto result = makeVariable<double>(Dims{Dim::X}, Shape{2});

From a6447af63a07ff043644bde50cca5957cd2ce79f Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 11:02:02 +0100
Subject: [PATCH 19/36] linux isnt happy

---
 lib/core/test/element_bin_detail_test.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lib/core/test/element_bin_detail_test.cpp b/lib/core/test/element_bin_detail_test.cpp
index 0b640da74f..866014ab82 100644
--- a/lib/core/test/element_bin_detail_test.cpp
+++ b/lib/core/test/element_bin_detail_test.cpp
@@ -15,7 +15,7 @@ using CoordEdgeTypePairs =
                      std::pair<double, int32_t>, std::pair<double, int64_t>,
                      std::pair<float, double>, std::pair<float, float>,
                      std::pair<float, int32_t>, std::pair<float, int64_t>>;
-TYPED_TEST_SUITE(ElementBinUtilTest, CoordEdgeTypePairs, );
+TYPED_TEST_SUITE(ElementBinUtilTest, CoordEdgeTypePairs);
 
 TYPED_TEST(ElementBinUtilTest, begin_edge) {
   typedef typename TypeParam::first_type CoordType;

From 891203a8776d759c789aa6e118f76251bda963f0 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 11:08:46 +0100
Subject: [PATCH 20/36] explicit declaration

---
 lib/core/test/element_logical_test.cpp | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/lib/core/test/element_logical_test.cpp b/lib/core/test/element_logical_test.cpp
index dc373ad937..26054c5f8a 100644
--- a/lib/core/test/element_logical_test.cpp
+++ b/lib/core/test/element_logical_test.cpp
@@ -8,6 +8,8 @@
 using namespace scipp;
 using namespace scipp::core::element;
 
+class LogicalTest : public ::testing::Test {};
+
 TEST(LogicalTest, accepts_only_bool) {
   static_assert(std::is_same_v<decltype(logical)::types, std::tuple<bool>>);
   static_assert(

From 6d3f01575ba00a13327cd7f697e539c5d400213d Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 11:22:49 +0100
Subject: [PATCH 21/36] use the test fixture

---
 lib/core/test/element_logical_test.cpp | 22 +++++++++++-----------
 1 file changed, 11 insertions(+), 11 deletions(-)

diff --git a/lib/core/test/element_logical_test.cpp b/lib/core/test/element_logical_test.cpp
index 26054c5f8a..4c2f7c9af7 100644
--- a/lib/core/test/element_logical_test.cpp
+++ b/lib/core/test/element_logical_test.cpp
@@ -8,20 +8,20 @@
 using namespace scipp;
 using namespace scipp::core::element;
 
-class LogicalTest : public ::testing::Test {};
+template <typename T> class LogicalTest : public ::testing::Test {};
 
-TEST(LogicalTest, accepts_only_bool) {
+TEST_F(LogicalTest, accepts_only_bool) {
   static_assert(std::is_same_v<decltype(logical)::types, std::tuple<bool>>);
   static_assert(
       std::is_same_v<decltype(logical_inplace)::types, std::tuple<bool>>);
 }
 
-TEST(LogicalTest, logical_unit) {
+TEST_F(LogicalTest, logical_unit) {
   EXPECT_EQ(logical(units::none), units::none);
   EXPECT_THROW(logical(units::m), except::UnitError);
 }
 
-TEST(LogicalTest, logical_inplace_unit) {
+TEST_F(LogicalTest, logical_inplace_unit) {
   auto u = units::none;
   EXPECT_NO_THROW(logical_inplace(u, units::none));
   EXPECT_EQ(u, units::none);
@@ -31,33 +31,33 @@ TEST(LogicalTest, logical_inplace_unit) {
   EXPECT_THROW(logical_inplace(u, units::m), except::UnitError);
 }
 
-TEST(LogicalTest, and) {
+TEST_F(LogicalTest, and) {
   EXPECT_EQ(logical_and(true, true), true);
   EXPECT_EQ(logical_and(true, false), false);
   EXPECT_EQ(logical_and(false, true), false);
   EXPECT_EQ(logical_and(false, false), false);
 }
 
-TEST(LogicalTest, or) {
+TEST_F(LogicalTest, or) {
   EXPECT_EQ(logical_or(true, true), true);
   EXPECT_EQ(logical_or(true, false), true);
   EXPECT_EQ(logical_or(false, true), true);
   EXPECT_EQ(logical_or(false, false), false);
 }
 
-TEST(LogicalTest, xor) {
+TEST_F(LogicalTest, xor) {
   EXPECT_EQ(logical_xor(true, true), false);
   EXPECT_EQ(logical_xor(true, false), true);
   EXPECT_EQ(logical_xor(false, true), true);
   EXPECT_EQ(logical_xor(false, false), false);
 }
 
-TEST(LogicalTest, not) {
+TEST_F(LogicalTest, not) {
   EXPECT_EQ(logical_not(true), false);
   EXPECT_EQ(logical_not(false), true);
 }
 
-TEST(LogicalTest, and_equals) {
+TEST_F(LogicalTest, and_equals) {
   for (const auto &a : {true, false})
     for (const auto &b : {true, false}) {
       bool x = a;
@@ -66,7 +66,7 @@ TEST(LogicalTest, and_equals) {
     }
 }
 
-TEST(LogicalTest, or_equals) {
+TEST_F(LogicalTest, or_equals) {
   for (const auto &a : {true, false})
     for (const auto &b : {true, false}) {
       bool x = a;
@@ -75,7 +75,7 @@ TEST(LogicalTest, or_equals) {
     }
 }
 
-TEST(LogicalTest, xor_equals) {
+TEST_F(LogicalTest, xor_equals) {
   for (const auto &a : {true, false})
     for (const auto &b : {true, false}) {
       bool x = a;

From bb41e63e3bcbb1f52867f831d3ba7c755d95b378 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 11:30:50 +0100
Subject: [PATCH 22/36] remove templating

---
 lib/core/test/element_logical_test.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lib/core/test/element_logical_test.cpp b/lib/core/test/element_logical_test.cpp
index 4c2f7c9af7..33960c23e8 100644
--- a/lib/core/test/element_logical_test.cpp
+++ b/lib/core/test/element_logical_test.cpp
@@ -8,7 +8,7 @@
 using namespace scipp;
 using namespace scipp::core::element;
 
-template <typename T> class LogicalTest : public ::testing::Test {};
+class LogicalTest : public ::testing::Test {};
 
 TEST_F(LogicalTest, accepts_only_bool) {
   static_assert(std::is_same_v<decltype(logical)::types, std::tuple<bool>>);

From 5225df198527395ab42f1674397d4a9777541d2e Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 13:22:21 +0100
Subject: [PATCH 23/36] revert and skip logical_inplace_unit

---
 lib/core/test/element_logical_test.cpp | 38 ++++++++++++--------------
 1 file changed, 18 insertions(+), 20 deletions(-)

diff --git a/lib/core/test/element_logical_test.cpp b/lib/core/test/element_logical_test.cpp
index 33960c23e8..e525d3ed37 100644
--- a/lib/core/test/element_logical_test.cpp
+++ b/lib/core/test/element_logical_test.cpp
@@ -8,56 +8,54 @@
 using namespace scipp;
 using namespace scipp::core::element;
 
-class LogicalTest : public ::testing::Test {};
-
-TEST_F(LogicalTest, accepts_only_bool) {
+TEST(LogicalTest, accepts_only_bool) {
   static_assert(std::is_same_v<decltype(logical)::types, std::tuple<bool>>);
   static_assert(
       std::is_same_v<decltype(logical_inplace)::types, std::tuple<bool>>);
 }
 
-TEST_F(LogicalTest, logical_unit) {
+TEST(LogicalTest, logical_unit) {
   EXPECT_EQ(logical(units::none), units::none);
   EXPECT_THROW(logical(units::m), except::UnitError);
 }
 
-TEST_F(LogicalTest, logical_inplace_unit) {
-  auto u = units::none;
-  EXPECT_NO_THROW(logical_inplace(u, units::none));
-  EXPECT_EQ(u, units::none);
-  EXPECT_THROW(logical_inplace(u, units::m), except::UnitError);
-  u = units::m;
-  EXPECT_THROW(logical_inplace(u, units::none), except::UnitError);
-  EXPECT_THROW(logical_inplace(u, units::m), except::UnitError);
-}
+// TEST(LogicalTest, logical_inplace_unit) {
+//   auto u = units::none;
+//   EXPECT_NO_THROW(logical_inplace(u, units::none));
+//   EXPECT_EQ(u, units::none);
+//   EXPECT_THROW(logical_inplace(u, units::m), except::UnitError);
+//   u = units::m;
+//   EXPECT_THROW(logical_inplace(u, units::none), except::UnitError);
+//   EXPECT_THROW(logical_inplace(u, units::m), except::UnitError);
+// }
 
-TEST_F(LogicalTest, and) {
+TEST(LogicalTest, and) {
   EXPECT_EQ(logical_and(true, true), true);
   EXPECT_EQ(logical_and(true, false), false);
   EXPECT_EQ(logical_and(false, true), false);
   EXPECT_EQ(logical_and(false, false), false);
 }
 
-TEST_F(LogicalTest, or) {
+TEST(LogicalTest, or) {
   EXPECT_EQ(logical_or(true, true), true);
   EXPECT_EQ(logical_or(true, false), true);
   EXPECT_EQ(logical_or(false, true), true);
   EXPECT_EQ(logical_or(false, false), false);
 }
 
-TEST_F(LogicalTest, xor) {
+TEST(LogicalTest, xor) {
   EXPECT_EQ(logical_xor(true, true), false);
   EXPECT_EQ(logical_xor(true, false), true);
   EXPECT_EQ(logical_xor(false, true), true);
   EXPECT_EQ(logical_xor(false, false), false);
 }
 
-TEST_F(LogicalTest, not) {
+TEST(LogicalTest, not) {
   EXPECT_EQ(logical_not(true), false);
   EXPECT_EQ(logical_not(false), true);
 }
 
-TEST_F(LogicalTest, and_equals) {
+TEST(LogicalTest, and_equals) {
   for (const auto &a : {true, false})
     for (const auto &b : {true, false}) {
       bool x = a;
@@ -66,7 +64,7 @@ TEST_F(LogicalTest, and_equals) {
     }
 }
 
-TEST_F(LogicalTest, or_equals) {
+TEST(LogicalTest, or_equals) {
   for (const auto &a : {true, false})
     for (const auto &b : {true, false}) {
       bool x = a;
@@ -75,7 +73,7 @@ TEST_F(LogicalTest, or_equals) {
     }
 }
 
-TEST_F(LogicalTest, xor_equals) {
+TEST(LogicalTest, xor_equals) {
   for (const auto &a : {true, false})
     for (const auto &b : {true, false}) {
       bool x = a;

From 89d63b8d695aa25105724726d91d27f85cdf6fc1 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 13:36:59 +0100
Subject: [PATCH 24/36] windows debug

---
 .github/workflows/pr_and_main.yml      |  4 +--
 .github/workflows/weekly.yml           |  2 +-
 lib/core/test/element_logical_test.cpp | 42 +++++++++++++++-----------
 3 files changed, 27 insertions(+), 21 deletions(-)

diff --git a/.github/workflows/pr_and_main.yml b/.github/workflows/pr_and_main.yml
index 35e2a324e0..9fc6721350 100644
--- a/.github/workflows/pr_and_main.yml
+++ b/.github/workflows/pr_and_main.yml
@@ -37,8 +37,8 @@ jobs:
       fail-fast: false
       matrix:
         variant:
-        - {os: ubuntu-24.04, cmake-preset: ci-linux}
-        - {os: macos-14, cmake-preset: ci-macos}
+        # - {os: ubuntu-24.04, cmake-preset: ci-linux}
+        # - {os: macos-14, cmake-preset: ci-macos}
         - {os: windows-2022, cmake-preset: ci-windows}
         python-version: ["3.10"]
 
diff --git a/.github/workflows/weekly.yml b/.github/workflows/weekly.yml
index 8349b7bc7e..c231c03237 100644
--- a/.github/workflows/weekly.yml
+++ b/.github/workflows/weekly.yml
@@ -1,7 +1,7 @@
 name: Weekly package builds
 
 on:
-  pull_request:
+  # pull_request:
   workflow_dispatch:
   # It seems that the push trigger below makes the weekly workflow run on every push
   # to `main` and on every tag creation. We remove it for now. To debug the weekly
diff --git a/lib/core/test/element_logical_test.cpp b/lib/core/test/element_logical_test.cpp
index e525d3ed37..9fd5731318 100644
--- a/lib/core/test/element_logical_test.cpp
+++ b/lib/core/test/element_logical_test.cpp
@@ -8,54 +8,60 @@
 using namespace scipp;
 using namespace scipp::core::element;
 
-TEST(LogicalTest, accepts_only_bool) {
+class LogicalTest : public ::testing::Test {
+protected:
+  void SetUp() override {}
+  void TearDown() override {}
+};
+
+TEST_F(LogicalTest, accepts_only_bool) {
   static_assert(std::is_same_v<decltype(logical)::types, std::tuple<bool>>);
   static_assert(
       std::is_same_v<decltype(logical_inplace)::types, std::tuple<bool>>);
 }
 
-TEST(LogicalTest, logical_unit) {
+TEST_F(LogicalTest, logical_unit) {
   EXPECT_EQ(logical(units::none), units::none);
   EXPECT_THROW(logical(units::m), except::UnitError);
 }
 
-// TEST(LogicalTest, logical_inplace_unit) {
-//   auto u = units::none;
-//   EXPECT_NO_THROW(logical_inplace(u, units::none));
-//   EXPECT_EQ(u, units::none);
-//   EXPECT_THROW(logical_inplace(u, units::m), except::UnitError);
-//   u = units::m;
-//   EXPECT_THROW(logical_inplace(u, units::none), except::UnitError);
-//   EXPECT_THROW(logical_inplace(u, units::m), except::UnitError);
-// }
+TEST_F(LogicalTest, logical_inplace_unit) {
+  auto u = units::none;
+  EXPECT_NO_THROW(logical_inplace(u, units::none));
+  EXPECT_EQ(u, units::none);
+  EXPECT_THROW(logical_inplace(u, units::m), except::UnitError);
+  u = units::m;
+  EXPECT_THROW(logical_inplace(u, units::none), except::UnitError);
+  EXPECT_THROW(logical_inplace(u, units::m), except::UnitError);
+}
 
-TEST(LogicalTest, and) {
+TEST_F(LogicalTest, and) {
   EXPECT_EQ(logical_and(true, true), true);
   EXPECT_EQ(logical_and(true, false), false);
   EXPECT_EQ(logical_and(false, true), false);
   EXPECT_EQ(logical_and(false, false), false);
 }
 
-TEST(LogicalTest, or) {
+TEST_F(LogicalTest, or) {
   EXPECT_EQ(logical_or(true, true), true);
   EXPECT_EQ(logical_or(true, false), true);
   EXPECT_EQ(logical_or(false, true), true);
   EXPECT_EQ(logical_or(false, false), false);
 }
 
-TEST(LogicalTest, xor) {
+TEST_F(LogicalTest, xor) {
   EXPECT_EQ(logical_xor(true, true), false);
   EXPECT_EQ(logical_xor(true, false), true);
   EXPECT_EQ(logical_xor(false, true), true);
   EXPECT_EQ(logical_xor(false, false), false);
 }
 
-TEST(LogicalTest, not) {
+TEST_F(LogicalTest, not) {
   EXPECT_EQ(logical_not(true), false);
   EXPECT_EQ(logical_not(false), true);
 }
 
-TEST(LogicalTest, and_equals) {
+TEST_F(LogicalTest, and_equals) {
   for (const auto &a : {true, false})
     for (const auto &b : {true, false}) {
       bool x = a;
@@ -64,7 +70,7 @@ TEST(LogicalTest, and_equals) {
     }
 }
 
-TEST(LogicalTest, or_equals) {
+TEST_F(LogicalTest, or_equals) {
   for (const auto &a : {true, false})
     for (const auto &b : {true, false}) {
       bool x = a;
@@ -73,7 +79,7 @@ TEST(LogicalTest, or_equals) {
     }
 }
 
-TEST(LogicalTest, xor_equals) {
+TEST_F(LogicalTest, xor_equals) {
   for (const auto &a : {true, false})
     for (const auto &b : {true, false}) {
       bool x = a;

From 9acdb0220f0ba8a4b390b28cd3ae1856211c6b61 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 13:57:45 +0100
Subject: [PATCH 25/36] comment out some tests

---
 lib/core/test/element_logical_test.cpp | 98 ++++++++++++--------------
 1 file changed, 47 insertions(+), 51 deletions(-)

diff --git a/lib/core/test/element_logical_test.cpp b/lib/core/test/element_logical_test.cpp
index 9fd5731318..2fefe93b93 100644
--- a/lib/core/test/element_logical_test.cpp
+++ b/lib/core/test/element_logical_test.cpp
@@ -8,11 +8,7 @@
 using namespace scipp;
 using namespace scipp::core::element;
 
-class LogicalTest : public ::testing::Test {
-protected:
-  void SetUp() override {}
-  void TearDown() override {}
-};
+class LogicalTest : public ::testing::Test {};
 
 TEST_F(LogicalTest, accepts_only_bool) {
   static_assert(std::is_same_v<decltype(logical)::types, std::tuple<bool>>);
@@ -35,55 +31,55 @@ TEST_F(LogicalTest, logical_inplace_unit) {
   EXPECT_THROW(logical_inplace(u, units::m), except::UnitError);
 }
 
-TEST_F(LogicalTest, and) {
-  EXPECT_EQ(logical_and(true, true), true);
-  EXPECT_EQ(logical_and(true, false), false);
-  EXPECT_EQ(logical_and(false, true), false);
-  EXPECT_EQ(logical_and(false, false), false);
-}
+// TEST_F(LogicalTest, and) {
+//   EXPECT_EQ(logical_and(true, true), true);
+//   EXPECT_EQ(logical_and(true, false), false);
+//   EXPECT_EQ(logical_and(false, true), false);
+//   EXPECT_EQ(logical_and(false, false), false);
+// }
 
-TEST_F(LogicalTest, or) {
-  EXPECT_EQ(logical_or(true, true), true);
-  EXPECT_EQ(logical_or(true, false), true);
-  EXPECT_EQ(logical_or(false, true), true);
-  EXPECT_EQ(logical_or(false, false), false);
-}
+// TEST_F(LogicalTest, or) {
+//   EXPECT_EQ(logical_or(true, true), true);
+//   EXPECT_EQ(logical_or(true, false), true);
+//   EXPECT_EQ(logical_or(false, true), true);
+//   EXPECT_EQ(logical_or(false, false), false);
+// }
 
-TEST_F(LogicalTest, xor) {
-  EXPECT_EQ(logical_xor(true, true), false);
-  EXPECT_EQ(logical_xor(true, false), true);
-  EXPECT_EQ(logical_xor(false, true), true);
-  EXPECT_EQ(logical_xor(false, false), false);
-}
+// TEST_F(LogicalTest, xor) {
+//   EXPECT_EQ(logical_xor(true, true), false);
+//   EXPECT_EQ(logical_xor(true, false), true);
+//   EXPECT_EQ(logical_xor(false, true), true);
+//   EXPECT_EQ(logical_xor(false, false), false);
+// }
 
-TEST_F(LogicalTest, not) {
-  EXPECT_EQ(logical_not(true), false);
-  EXPECT_EQ(logical_not(false), true);
-}
+// TEST_F(LogicalTest, not) {
+//   EXPECT_EQ(logical_not(true), false);
+//   EXPECT_EQ(logical_not(false), true);
+// }
 
-TEST_F(LogicalTest, and_equals) {
-  for (const auto &a : {true, false})
-    for (const auto &b : {true, false}) {
-      bool x = a;
-      logical_and_equals(x, b);
-      EXPECT_EQ(x, logical_and(a, b));
-    }
-}
+// TEST_F(LogicalTest, and_equals) {
+//   for (const auto &a : {true, false})
+//     for (const auto &b : {true, false}) {
+//       bool x = a;
+//       logical_and_equals(x, b);
+//       EXPECT_EQ(x, logical_and(a, b));
+//     }
+// }
 
-TEST_F(LogicalTest, or_equals) {
-  for (const auto &a : {true, false})
-    for (const auto &b : {true, false}) {
-      bool x = a;
-      logical_or_equals(x, b);
-      EXPECT_EQ(x, logical_or(a, b));
-    }
-}
+// TEST_F(LogicalTest, or_equals) {
+//   for (const auto &a : {true, false})
+//     for (const auto &b : {true, false}) {
+//       bool x = a;
+//       logical_or_equals(x, b);
+//       EXPECT_EQ(x, logical_or(a, b));
+//     }
+// }
 
-TEST_F(LogicalTest, xor_equals) {
-  for (const auto &a : {true, false})
-    for (const auto &b : {true, false}) {
-      bool x = a;
-      logical_xor_equals(x, b);
-      EXPECT_EQ(x, logical_xor(a, b));
-    }
-}
+// TEST_F(LogicalTest, xor_equals) {
+//   for (const auto &a : {true, false})
+//     for (const auto &b : {true, false}) {
+//       bool x = a;
+//       logical_xor_equals(x, b);
+//       EXPECT_EQ(x, logical_xor(a, b));
+//     }
+// }

From f6df9a5b19f402bcc055987fb6f794ce323f82ce Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 14:15:35 +0100
Subject: [PATCH 26/36] test out logical_not

---
 lib/core/test/element_logical_test.cpp | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/lib/core/test/element_logical_test.cpp b/lib/core/test/element_logical_test.cpp
index 2fefe93b93..4852aba22e 100644
--- a/lib/core/test/element_logical_test.cpp
+++ b/lib/core/test/element_logical_test.cpp
@@ -52,10 +52,10 @@ TEST_F(LogicalTest, logical_inplace_unit) {
 //   EXPECT_EQ(logical_xor(false, false), false);
 // }
 
-// TEST_F(LogicalTest, not) {
-//   EXPECT_EQ(logical_not(true), false);
-//   EXPECT_EQ(logical_not(false), true);
-// }
+TEST_F(LogicalTest, not) {
+  EXPECT_EQ(logical_not(true), false);
+  EXPECT_EQ(logical_not(false), true);
+}
 
 // TEST_F(LogicalTest, and_equals) {
 //   for (const auto &a : {true, false})

From b40d6ef97d4dc855ac4f09052dfaf94e02e946c0 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 14:23:13 +0100
Subject: [PATCH 27/36] rename not

---
 lib/core/test/element_logical_test.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lib/core/test/element_logical_test.cpp b/lib/core/test/element_logical_test.cpp
index 4852aba22e..296aeab9e4 100644
--- a/lib/core/test/element_logical_test.cpp
+++ b/lib/core/test/element_logical_test.cpp
@@ -52,7 +52,7 @@ TEST_F(LogicalTest, logical_inplace_unit) {
 //   EXPECT_EQ(logical_xor(false, false), false);
 // }
 
-TEST_F(LogicalTest, not) {
+TEST_F(LogicalTest, logical_not_op) {
   EXPECT_EQ(logical_not(true), false);
   EXPECT_EQ(logical_not(false), true);
 }

From dda7601c7827a51f763f7af8bc30bf977be0eda8 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 14:34:29 +0100
Subject: [PATCH 28/36] remove fixture

---
 lib/core/test/element_logical_test.cpp | 10 ++++------
 1 file changed, 4 insertions(+), 6 deletions(-)

diff --git a/lib/core/test/element_logical_test.cpp b/lib/core/test/element_logical_test.cpp
index 296aeab9e4..2068c6e16d 100644
--- a/lib/core/test/element_logical_test.cpp
+++ b/lib/core/test/element_logical_test.cpp
@@ -8,20 +8,18 @@
 using namespace scipp;
 using namespace scipp::core::element;
 
-class LogicalTest : public ::testing::Test {};
-
-TEST_F(LogicalTest, accepts_only_bool) {
+TEST(LogicalTest, accepts_only_bool) {
   static_assert(std::is_same_v<decltype(logical)::types, std::tuple<bool>>);
   static_assert(
       std::is_same_v<decltype(logical_inplace)::types, std::tuple<bool>>);
 }
 
-TEST_F(LogicalTest, logical_unit) {
+TEST(LogicalTest, logical_unit) {
   EXPECT_EQ(logical(units::none), units::none);
   EXPECT_THROW(logical(units::m), except::UnitError);
 }
 
-TEST_F(LogicalTest, logical_inplace_unit) {
+TEST(LogicalTest, logical_inplace_unit) {
   auto u = units::none;
   EXPECT_NO_THROW(logical_inplace(u, units::none));
   EXPECT_EQ(u, units::none);
@@ -52,7 +50,7 @@ TEST_F(LogicalTest, logical_inplace_unit) {
 //   EXPECT_EQ(logical_xor(false, false), false);
 // }
 
-TEST_F(LogicalTest, logical_not_op) {
+TEST(LogicalTest, logical_not_op) {
   EXPECT_EQ(logical_not(true), false);
   EXPECT_EQ(logical_not(false), true);
 }

From 9d13c7fd64e0af35577f7100b66aa089838c3b62 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 14:43:59 +0100
Subject: [PATCH 29/36] fix up test name

---
 lib/core/test/element_logical_test.cpp | 84 +++++++++++++-------------
 1 file changed, 42 insertions(+), 42 deletions(-)

diff --git a/lib/core/test/element_logical_test.cpp b/lib/core/test/element_logical_test.cpp
index 2068c6e16d..850d661de6 100644
--- a/lib/core/test/element_logical_test.cpp
+++ b/lib/core/test/element_logical_test.cpp
@@ -29,55 +29,55 @@ TEST(LogicalTest, logical_inplace_unit) {
   EXPECT_THROW(logical_inplace(u, units::m), except::UnitError);
 }
 
-// TEST_F(LogicalTest, and) {
-//   EXPECT_EQ(logical_and(true, true), true);
-//   EXPECT_EQ(logical_and(true, false), false);
-//   EXPECT_EQ(logical_and(false, true), false);
-//   EXPECT_EQ(logical_and(false, false), false);
-// }
+TEST(LogicalTest, logical_and_op) {
+  EXPECT_EQ(logical_and(true, true), true);
+  EXPECT_EQ(logical_and(true, false), false);
+  EXPECT_EQ(logical_and(false, true), false);
+  EXPECT_EQ(logical_and(false, false), false);
+}
 
-// TEST_F(LogicalTest, or) {
-//   EXPECT_EQ(logical_or(true, true), true);
-//   EXPECT_EQ(logical_or(true, false), true);
-//   EXPECT_EQ(logical_or(false, true), true);
-//   EXPECT_EQ(logical_or(false, false), false);
-// }
+TEST(LogicalTest, logical_or_op) {
+  EXPECT_EQ(logical_or(true, true), true);
+  EXPECT_EQ(logical_or(true, false), true);
+  EXPECT_EQ(logical_or(false, true), true);
+  EXPECT_EQ(logical_or(false, false), false);
+}
 
-// TEST_F(LogicalTest, xor) {
-//   EXPECT_EQ(logical_xor(true, true), false);
-//   EXPECT_EQ(logical_xor(true, false), true);
-//   EXPECT_EQ(logical_xor(false, true), true);
-//   EXPECT_EQ(logical_xor(false, false), false);
-// }
+TEST(LogicalTest, logical_xor_op) {
+  EXPECT_EQ(logical_xor(true, true), false);
+  EXPECT_EQ(logical_xor(true, false), true);
+  EXPECT_EQ(logical_xor(false, true), true);
+  EXPECT_EQ(logical_xor(false, false), false);
+}
 
 TEST(LogicalTest, logical_not_op) {
   EXPECT_EQ(logical_not(true), false);
   EXPECT_EQ(logical_not(false), true);
 }
 
-// TEST_F(LogicalTest, and_equals) {
-//   for (const auto &a : {true, false})
-//     for (const auto &b : {true, false}) {
-//       bool x = a;
-//       logical_and_equals(x, b);
-//       EXPECT_EQ(x, logical_and(a, b));
-//     }
-// }
+TEST(LogicalTest, and_equals) {
+  for (const auto &a : {true, false})
+    for (const auto &b : {true, false}) {
+      bool x = a;
+      logical_and_equals(x, b);
+      EXPECT_EQ(x, logical_and(a, b));
+    }
+}
 
-// TEST_F(LogicalTest, or_equals) {
-//   for (const auto &a : {true, false})
-//     for (const auto &b : {true, false}) {
-//       bool x = a;
-//       logical_or_equals(x, b);
-//       EXPECT_EQ(x, logical_or(a, b));
-//     }
-// }
+TEST(LogicalTest, or_equals) {
+  for (const auto &a : {true, false})
+    for (const auto &b : {true, false}) {
+      bool x = a;
+      logical_or_equals(x, b);
+      EXPECT_EQ(x, logical_or(a, b));
+    }
+}
 
-// TEST_F(LogicalTest, xor_equals) {
-//   for (const auto &a : {true, false})
-//     for (const auto &b : {true, false}) {
-//       bool x = a;
-//       logical_xor_equals(x, b);
-//       EXPECT_EQ(x, logical_xor(a, b));
-//     }
-// }
+TEST(LogicalTest, xor_equals) {
+  for (const auto &a : {true, false})
+    for (const auto &b : {true, false}) {
+      bool x = a;
+      logical_xor_equals(x, b);
+      EXPECT_EQ(x, logical_xor(a, b));
+    }
+}

From 4492f91c58e939ff256e22b85a02d0a4bd2f60f2 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 15:09:28 +0100
Subject: [PATCH 30/36] test out wheels and conda

---
 .github/workflows/pr_and_main.yml |  4 +--
 .github/workflows/weekly.yml      | 20 ++++++-------
 .github/workflows/wheel.yml       |  1 -
 lib/cmake/scipp-conan.cmake       | 47 +++++++++++++++++++++++--------
 4 files changed, 47 insertions(+), 25 deletions(-)

diff --git a/.github/workflows/pr_and_main.yml b/.github/workflows/pr_and_main.yml
index 9fc6721350..35e2a324e0 100644
--- a/.github/workflows/pr_and_main.yml
+++ b/.github/workflows/pr_and_main.yml
@@ -37,8 +37,8 @@ jobs:
       fail-fast: false
       matrix:
         variant:
-        # - {os: ubuntu-24.04, cmake-preset: ci-linux}
-        # - {os: macos-14, cmake-preset: ci-macos}
+        - {os: ubuntu-24.04, cmake-preset: ci-linux}
+        - {os: macos-14, cmake-preset: ci-macos}
         - {os: windows-2022, cmake-preset: ci-windows}
         python-version: ["3.10"]
 
diff --git a/.github/workflows/weekly.yml b/.github/workflows/weekly.yml
index c231c03237..9bf6f20554 100644
--- a/.github/workflows/weekly.yml
+++ b/.github/workflows/weekly.yml
@@ -1,7 +1,7 @@
 name: Weekly package builds
 
 on:
-  # pull_request:
+  pull_request:
   workflow_dispatch:
   # It seems that the push trigger below makes the weekly workflow run on every push
   # to `main` and on every tag creation. We remove it for now. To debug the weekly
@@ -32,12 +32,12 @@ jobs:
       target: ${{ matrix.variant.target }}
       python-version: ${{ matrix.python-version }}
 
-  # build_wheels:
-  #   strategy:
-  #     matrix:
-  #       os: [ubuntu-24.04]
-  #       build: [cp310]
-  #   uses: ./.github/workflows/wheel.yml
-  #   with:
-  #     os: ${{ matrix.os }}
-  #     build: ${{ matrix.build }}
+  build_wheels:
+    strategy:
+      matrix:
+        os: [ubuntu-24.04]
+        build: [cp310, cp313]
+    uses: ./.github/workflows/wheel.yml
+    with:
+      os: ${{ matrix.os }}
+      build: ${{ matrix.build }}
diff --git a/.github/workflows/wheel.yml b/.github/workflows/wheel.yml
index a417e09847..7bc08949a8 100644
--- a/.github/workflows/wheel.yml
+++ b/.github/workflows/wheel.yml
@@ -25,7 +25,6 @@ jobs:
 
     - uses: pypa/cibuildwheel@v2.22.0
       env:
-        CIBW_BEFORE_ALL_LINUX: yum install -y eigen3-devel boost-devel google-benchmark gtest
         CIBW_BUILD: ${{ inputs.build }}-*
         MACOSX_DEPLOYMENT_TARGET: "11.0"
 
diff --git a/lib/cmake/scipp-conan.cmake b/lib/cmake/scipp-conan.cmake
index d78ec88087..681fe7a72c 100644
--- a/lib/cmake/scipp-conan.cmake
+++ b/lib/cmake/scipp-conan.cmake
@@ -28,18 +28,41 @@ include(${CMAKE_CURRENT_BINARY_DIR}/conan.cmake)
 list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_BINARY_DIR})
 list(APPEND CMAKE_PREFIX_PATH ${CMAKE_CURRENT_BINARY_DIR})
 
-conan_cmake_configure(
-  REQUIRES
-  LLNL-Units/0.9.1
-  OPTIONS
-  LLNL-Units:shared=False
-  LLNL-Units:fPIC=True
-  LLNL-Units:base_type=uint64_t
-  LLNL-Units:namespace=llnl::units
-  GENERATORS
-  cmake_find_package_multi
-  ${CONAN_DEPLOY}
-)
+if(SKBUILD)
+  conan_cmake_configure(
+    REQUIRES
+    benchmark/1.6.1
+    boost/1.86.0
+    eigen/3.4.0
+    gtest/1.11.0
+    LLNL-Units/0.9.1
+    pybind11/2.13.5
+    onetbb/2021.12.0
+    OPTIONS
+    benchmark:shared=False
+    boost:header_only=True
+    gtest:shared=False
+    LLNL-Units:shared=False
+    LLNL-Units:fPIC=True
+    LLNL-Units:base_type=uint64_t
+    LLNL-Units:namespace=llnl::units
+    GENERATORS
+    cmake_find_package_multi
+    deploy
+  )
+else()
+  conan_cmake_configure(
+    REQUIRES
+    LLNL-Units/0.9.1
+    OPTIONS
+    LLNL-Units:shared=False
+    LLNL-Units:fPIC=True
+    LLNL-Units:base_type=uint64_t
+    LLNL-Units:namespace=llnl::units
+    GENERATORS
+    cmake_find_package_multi
+  )
+endif()
 
 conan_cmake_autodetect(conan_settings)
 if(DEFINED CMAKE_OSX_ARCHITECTURES)

From 0bcc45d414fc1f5ca54fe4ec62af961465319f5f Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 15:28:21 +0100
Subject: [PATCH 31/36] add more arch test and cmake-package-test

---
 .github/workflows/weekly.yml | 2 +-
 conda/meta.yaml              | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/.github/workflows/weekly.yml b/.github/workflows/weekly.yml
index 9bf6f20554..a33ecc8275 100644
--- a/.github/workflows/weekly.yml
+++ b/.github/workflows/weekly.yml
@@ -35,7 +35,7 @@ jobs:
   build_wheels:
     strategy:
       matrix:
-        os: [ubuntu-24.04]
+        os: [ubuntu-24.04, macos-13, macos-14, windows-2022]
         build: [cp310, cp313]
     uses: ./.github/workflows/wheel.yml
     with:
diff --git a/conda/meta.yaml b/conda/meta.yaml
index bb4642543d..1152927854 100644
--- a/conda/meta.yaml
+++ b/conda/meta.yaml
@@ -77,7 +77,7 @@ test:
     - tests/
   commands:
     - python -m pytest -v tests
-    # - python cmake-package-test/build.py
+    - python cmake-package-test/build.py
 {% endif %}
 
 build:

From 2fde0f80504609b95794d1dfd522d55dc7e61510 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 15:52:24 +0100
Subject: [PATCH 32/36] add cpp deps for cmake-package-test

---
 conda/meta.yaml | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/conda/meta.yaml b/conda/meta.yaml
index 1152927854..cac78bc886 100644
--- a/conda/meta.yaml
+++ b/conda/meta.yaml
@@ -70,6 +70,12 @@ test:
     - scipy>=1.7.0
     - tbb-devel=2022.0.0
     - xarray
+    - libboost-headers=1.86.0
+    - eigen=3.4.0
+    - pybind11=2.13.6
+    - benchmark=1.6.1
+    - gmock=1.15.2
+    - gtest=1.15.2
   files:
     - cmake-package-test/
   source_files:

From 0817c7b492b42c96e378fa84780a8ea4d7c63267 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Thu, 9 Jan 2025 16:19:37 +0100
Subject: [PATCH 33/36] dont fail fast

---
 .github/workflows/weekly.yml | 1 +
 1 file changed, 1 insertion(+)

diff --git a/.github/workflows/weekly.yml b/.github/workflows/weekly.yml
index a33ecc8275..285ce80a9b 100644
--- a/.github/workflows/weekly.yml
+++ b/.github/workflows/weekly.yml
@@ -34,6 +34,7 @@ jobs:
 
   build_wheels:
     strategy:
+      fail-fast: false
       matrix:
         os: [ubuntu-24.04, macos-13, macos-14, windows-2022]
         build: [cp310, cp313]

From eca36e9a7a6b0133a3f3ee3c728d5c64b181b051 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Fri, 10 Jan 2025 10:02:21 +0100
Subject: [PATCH 34/36] set(CONAN_RUNTIME_DEPENDENCIES "tbb")

---
 lib/cmake/scipp-conan.cmake | 1 +
 1 file changed, 1 insertion(+)

diff --git a/lib/cmake/scipp-conan.cmake b/lib/cmake/scipp-conan.cmake
index 681fe7a72c..04e700908c 100644
--- a/lib/cmake/scipp-conan.cmake
+++ b/lib/cmake/scipp-conan.cmake
@@ -29,6 +29,7 @@ list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_BINARY_DIR})
 list(APPEND CMAKE_PREFIX_PATH ${CMAKE_CURRENT_BINARY_DIR})
 
 if(SKBUILD)
+  set(CONAN_RUNTIME_DEPENDENCIES "tbb")
   conan_cmake_configure(
     REQUIRES
     benchmark/1.6.1

From 3832fbe5b37aceb5ac64749cb515f69bd44b5fa4 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Fri, 10 Jan 2025 10:33:29 +0100
Subject: [PATCH 35/36] clean up

---
 .github/workflows/weekly.yml | 2 --
 lib/cmake/scipp-conan.cmake  | 4 ++++
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/.github/workflows/weekly.yml b/.github/workflows/weekly.yml
index 285ce80a9b..a76cf4172e 100644
--- a/.github/workflows/weekly.yml
+++ b/.github/workflows/weekly.yml
@@ -1,7 +1,6 @@
 name: Weekly package builds
 
 on:
-  pull_request:
   workflow_dispatch:
   # It seems that the push trigger below makes the weekly workflow run on every push
   # to `main` and on every tag creation. We remove it for now. To debug the weekly
@@ -34,7 +33,6 @@ jobs:
 
   build_wheels:
     strategy:
-      fail-fast: false
       matrix:
         os: [ubuntu-24.04, macos-13, macos-14, windows-2022]
         build: [cp310, cp313]
diff --git a/lib/cmake/scipp-conan.cmake b/lib/cmake/scipp-conan.cmake
index 04e700908c..13a379732b 100644
--- a/lib/cmake/scipp-conan.cmake
+++ b/lib/cmake/scipp-conan.cmake
@@ -29,6 +29,10 @@ list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_BINARY_DIR})
 list(APPEND CMAKE_PREFIX_PATH ${CMAKE_CURRENT_BINARY_DIR})
 
 if(SKBUILD)
+  # The deploy generator is used to install dependencies into a know location.
+  # The RUNTIME_DEPENDENCIES DIRECTORIES install option is then used to find the
+  # dependencies. This is actually required only for Windows, since on Linux and
+  # OSX cmake finds the files anyway, based on the target's rpath.
   set(CONAN_RUNTIME_DEPENDENCIES "tbb")
   conan_cmake_configure(
     REQUIRES

From 9658e4a4dd776a811377e16d1252bc76cf96fc66 Mon Sep 17 00:00:00 2001
From: Mridul Seth <git@mriduls.com>
Date: Fri, 10 Jan 2025 11:25:24 +0100
Subject: [PATCH 36/36] address review, use macros

---
 lib/dataset/test/dataset_test.cpp    | 17 +++++++----------
 lib/dataset/test/equals_nan_test.cpp |  6 ++++--
 lib/dataset/test/generated_test.cpp  |  5 +++--
 lib/variable/test/slice_test.cpp     |  2 +-
 4 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/lib/dataset/test/dataset_test.cpp b/lib/dataset/test/dataset_test.cpp
index b20eee4aab..486680b09c 100644
--- a/lib/dataset/test/dataset_test.cpp
+++ b/lib/dataset/test/dataset_test.cpp
@@ -14,6 +14,7 @@
 
 #include "dataset_test_common.h"
 #include "test_data_arrays.h"
+#include "test_macros.h"
 
 using namespace scipp;
 
@@ -791,8 +792,8 @@ struct DatasetRenameTest : public ::testing::Test {
 };
 
 TEST_F(DatasetRenameTest, fail_duplicate_dim) {
-  ASSERT_THROW(static_cast<void>(d.rename_dims({{Dim::X, Dim::Y}})),
-               except::DimensionError);
+  ASSERT_THROW_DISCARD(d.rename_dims({{Dim::X, Dim::Y}}),
+                       except::DimensionError);
   ASSERT_EQ(d, original);
 }
 
@@ -800,32 +801,28 @@ TEST_F(DatasetRenameTest, fail_duplicate_in_edge_dim_of_coord) {
   auto ds = copy(d);
   const Dim dim{"edge"};
   ds.setCoord(dim, makeVariable<double>(Dims{dim}, Shape{2}));
-  ASSERT_THROW(static_cast<void>(ds.rename_dims({{Dim::X, dim}})),
-               except::DimensionError);
+  ASSERT_THROW_DISCARD(ds.rename_dims({{Dim::X, dim}}), except::DimensionError);
 }
 
 TEST_F(DatasetRenameTest, fail_duplicate_in_edge_dim_of_item_attr) {
   auto ds = copy(d);
   const Dim dim{"edge"};
   ds["data_xy"].attrs().set(dim, makeVariable<double>(Dims{dim}, Shape{2}));
-  ASSERT_THROW(static_cast<void>(ds.rename_dims({{Dim::X, dim}})),
-               except::DimensionError);
+  ASSERT_THROW_DISCARD(ds.rename_dims({{Dim::X, dim}}), except::DimensionError);
 }
 
 TEST_F(DatasetRenameTest, fail_duplicate_in_edge_dim_in_data_array_coord) {
   auto da = copy(d["data_xy"]);
   const Dim dim{"edge"};
   da.coords().set(dim, makeVariable<double>(Dims{dim}, Shape{2}));
-  ASSERT_THROW(static_cast<void>(da.rename_dims({{Dim::X, dim}})),
-               except::DimensionError);
+  ASSERT_THROW_DISCARD(da.rename_dims({{Dim::X, dim}}), except::DimensionError);
 }
 
 TEST_F(DatasetRenameTest, fail_duplicate_in_edge_dim_in_data_array_attr) {
   auto da = copy(d["data_xy"]);
   const Dim dim{"edge"};
   da.attrs().set(dim, makeVariable<double>(Dims{dim}, Shape{2}));
-  ASSERT_THROW(static_cast<void>(da.rename_dims({{Dim::X, dim}})),
-               except::DimensionError);
+  ASSERT_THROW_DISCARD(da.rename_dims({{Dim::X, dim}}), except::DimensionError);
 }
 
 TEST_F(DatasetRenameTest, existing) {
diff --git a/lib/dataset/test/equals_nan_test.cpp b/lib/dataset/test/equals_nan_test.cpp
index 66bdfa0af3..aae606cc70 100644
--- a/lib/dataset/test/equals_nan_test.cpp
+++ b/lib/dataset/test/equals_nan_test.cpp
@@ -5,6 +5,8 @@
 #include "scipp/dataset/bins.h"
 #include "scipp/dataset/shape.h"
 
+#include "test_macros.h"
+
 using namespace scipp;
 
 template <class T> void check_equal(const T &var) {
@@ -38,8 +40,8 @@ class EqualsNanTest : public ::testing::Test {
     check_equal(make_bins(indices, Dim::X, ds));
     da.masks().erase("mask");
     ds["a"].masks().erase("mask");
-    ASSERT_NO_THROW(static_cast<void>(da + da));
-    ASSERT_NO_THROW(static_cast<void>(da + copy(da)));
+    ASSERT_NO_THROW_DISCARD(da + da);
+    ASSERT_NO_THROW_DISCARD(da + copy(da));
     ASSERT_NO_THROW(ds + ds);
     ASSERT_NO_THROW(ds + copy(ds));
     ASSERT_NO_THROW(ds.setData("b", da));
diff --git a/lib/dataset/test/generated_test.cpp b/lib/dataset/test/generated_test.cpp
index cc69b440e7..98d0132901 100644
--- a/lib/dataset/test/generated_test.cpp
+++ b/lib/dataset/test/generated_test.cpp
@@ -9,6 +9,7 @@
 #include "scipp/variable/reciprocal.h"
 
 #include "test_data_arrays.h"
+#include "test_macros.h"
 
 using namespace scipp;
 
@@ -120,6 +121,6 @@ TEST_F(GeneratedBinaryDataArrayTest, non_bool_masks_with_same_names) {
       makeVariable<double>(Dims{Dim::X}, Shape{2}, units::m, Values{1, 2});
   auto mask = makeVariable<double>(Dims{Dim::X}, Shape{2}, Values{0.1, 0.1});
   a = DataArray(data, {{Dim::X, coord}}, {{"mask", mask}});
-  ASSERT_THROW(static_cast<void>(less(a, a)), except::TypeError);
-  ASSERT_THROW(static_cast<void>(a += a), except::TypeError);
+  ASSERT_THROW_DISCARD(less(a, a), except::TypeError);
+  ASSERT_THROW_DISCARD(a += a, except::TypeError);
 }
diff --git a/lib/variable/test/slice_test.cpp b/lib/variable/test/slice_test.cpp
index a68454ed94..66bfbd1d4c 100644
--- a/lib/variable/test/slice_test.cpp
+++ b/lib/variable/test/slice_test.cpp
@@ -49,7 +49,7 @@ TEST(VariableSliceTest, negative_stride_throws) {
   // sanity check since Variable::slice needs modifications if class Slice
   // started to support this. See DISABLED tests below.
   const auto var = make_range();
-  ASSERT_ANY_THROW(static_cast<void>(var.slice({Dim::X, 0, 10, -1})));
+  ASSERT_ANY_THROW_DISCARD(var.slice({Dim::X, 0, 10, -1}));
 }
 
 TEST(VariableSliceTest,
